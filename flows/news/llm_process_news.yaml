from: local/db_envs.yaml

name: 新闻数据处理并建立向量索引
description: 从MongoDB轮询读取新闻，进行主题分类、地点识别，建立ES全文索引和Qdrant向量化索引。ES索引mapping查看`config/es-mappings/news.json`
arguments: 0
consts:
  mongo2:
    database: global-news
    collection: news
  es1:
    index: goinv3_document_news
    buffer_size: 10
  qdrant:
    collection: chunk
  chatglm4: http://10.208.63.29:8888
  bge_large_zh: http://10.208.63.29:8001/embed
  gogpt_13b: http://10.208.63.29:8890
  baichuan_13b: http://10.208.63.29:8891

  renames:
    content.title: title
    content.content: content
    content.date: date
    event_time_date: publish_time

nodes:
  db1: util.database.mongodb.MongoDB(**mongo2)
  db2: util.database.qdrant.Qdrant(**qdrant)
  db_es: util.database.elasticsearch.ES(**es1)
  print: Print
  loader: Function('wikidata_filter.gestata.dbops.scroll', db1, sortby="_id", limit=1)

  prompt1: util.files.text('config/prompt/news_classify.txt')
  prompt2: util.files.text('config/prompt/news_country_rec.txt')

  select: Select('id', 'content.title', 'content.content', 'url', 'event_time_date')
  rename: RenameFields(**renames)
  concat: ConcatFields('cont', 'title', 'content', sep='\n')
  short_content: Map(lambda s:s[:200], 'cont', target_key='short_content')
  remove: RemoveFields('cont')
  chain1: Chain(select, rename, concat, short_content, remove)

  class1: model.GoGPT(api_base=chatglm4, field='short_content', prompt=prompt1)
  rename1: RenameFields(_llm='tag1')
  llm1: Chain(class1, rename1)

  class2: model.GoGPT(api_base=chatglm4, field='short_content', prompt=prompt2)
  rename2: RenameFields(_llm='tag2')
  llm2: Chain(class2, rename2)

  tag1: Map('util.parser.tag_split', key='tag1')
  tag2: Map('util.parser.tag_split', key='tag2')
  remove2: RemoveFields('short_content')
  add_ts: AddTS('inserted_time')
  write_es: Function('wikidata_filter.gestata.dbops.upsert', db_es)
  counter: Count(ticks=10)
  write1: Chain(llm1, llm2, remove2, tag1, tag2, add_ts, write_es, counter)

  chunk: Map('util.split.simple', key='content',target_key='chunks')
  flat: Flat(key='chunks', inherit_props=True)
  vector: model.embed.Local(api_base=bge_large_zh, field='chunks', target_key='vector')
  write2: Chain(chunk, print, flat, print, vector)

  group: Fork(write1, write2, copy_data=True)

loader: TimedLoader(loader, interval=3600)
processor: Chain(chain1, print, write2)
